
DROP TABLE TEMP_RS_3254345345234
/

CREATE TABLE TEMP_RS_3254345345234
NOLOGGING
PARALLEL

AS
   SELECT /*+PARALLEL(30)*/
         ETL_DATE,
          ACCTNO CONTRACT_ID,
          CIFNO CUSTOMER_ID,
          RATE * 100 CUSTOMER_INTEREST
     FROM HSTAGING.SI_DAT_CDMAST@HSTAGING_PROD
    WHERE     RATE <> 0
          AND ETL_DATE >= TO_CHAR (TO_DATE ('202006', 'RRRRMM'), 'RRRRDDD')
/

DROP TABLE TEMP_RS_32
/

CREATE TABLE TEMP_RS_32
NOLOGGING
PARALLEL

AS
   SELECT /*+PARALLEL(30)*/
         A.ROWID RWID, B.CUSTOMER_INTEREST
     FROM FTP_AUDIT_TAB_202006 A, TEMP_RS_3254345345234 B
    WHERE     A.CUSTOMER_ID = TO_CHAR (B.CUSTOMER_ID)
          AND A.CONTRACT_ID = TO_CHAR (B.CONTRACT_ID)
          AND TO_DATE (ETL_DATE, 'RRRRDDD') = BUSINESS_DATE
          AND FTP_GROUP IN ('FD', 'INTPAY')
          AND B.CUSTOMER_INTEREST <> A.CUSTOMER_INTEREST
/



DECLARE
   CURSOR EB
   IS
      SELECT * FROM TEMP_RS_32;
BEGIN
   FOR I IN EB
   LOOP
      UPDATE AUTO_FTP_AUDIT_TAB_202006
         SET CUSTOMER_INTEREST = I.CUSTOMER_INTEREST,
             FTP_MARGIN = (FTP_RATE_TOTAL - I.CUSTOMER_INTEREST)
       WHERE ROWID = I.RWID;

      COMMIT;
   END LOOP;

   COMMIT;
END;


CREATE TABLE          INT_RATE_GAP_JUN2020   NOLOGGING PARALLEL COMPRESS FOR ALL OPERATIONS AS 
SELECT /*+PARALLEL(3)*/ YEAR_MONTH, BUSINESS_DATE, VISION_SBU, CUSTOMER_ID, CONTRACT_ID, CUSTOMER_NAME, CURRENCY, EXCHANGE_RATE, MIS_CURRENCY, FTP_GROUP, 
FTP_REFERENCE, FTP_SOURCE_REFERENCE, FTP_METHOD_REFERENCE, METHOD_TYPE, REPRICING_FLAG, FTP_TENOR_TYPE, LP_TENOR_TYPE, START_DATE, MATURITY_DATE,
 START_REPRICE_DATE, NEXT_REPRICE_DATE, REPRICING_TERM, REPRICING_TERM_CODE, BALANCE, FTP_TOTAL, FTP_RATE_TOTAL,
  CUSTOMER_INTEREST, FTP_MARGIN, FTP_CURVE_ID, FTP_RATE_ID, FTP_CURVE, FTP_ADDON, FTP_SUBSIDY, LP_RATE_ID, LP_RATE,
   FTP_AMOUNT, FTP_ADJUSTMENT, PREMIUM, ADDON_DEPOSIT_RATE, ADDON_DEPOSIT_AMT, SUBSIDY_RATE, SUBSIDY_AMT, ADDON_LENDING_RATE,
    ADDON_LENDING_AMT, REQUIRED_RESERVE_RATE, REQUIRED_RESERVE_AMT, GL_ALLOCATION_RATE, GL_ALLOCATION_AMT, ADDON_ATT_RATE1,
     ADDON_ATT_AMT1, OFFICE_ACCOUNT, GL_ENRICH_ID, BS_GL, PL_GL, VISION_OUC, ACCOUNT_OFFICER, COST_CENTER, SOURCE_OF_FUND, SOURCE_ID, RECORD_TYPE, ORIGINAL_OUC, 
A.DATE_LAST_MODIFIED,
 A.DATE_CREATION, COUNTRY, LE_BOOK, SEQUENCE_FD, 
SEQUENCE_FD_NEW, VERSION_NO, SBU_AUDIT,
 (SELECT /*+PARALLEL(3)*/ TENOR_DESCRIPTION FROM TENOR_BUCKETS
 WHERE   TENOR_APPLICATION_CODE = 203
    AND NVL(ROUND(TO_DATE(MATURITY_DATE,'DD-MM-RRRR')- TO_DATE(START_DATE,'DD-MM-RRRR') +1),0) 
    > DAY_START  
    AND  NVL(ROUND(TO_DATE(MATURITY_DATE,'DD-MM-RRRR')- TO_DATE(START_DATE,'DD-MM-RRRR') +1),0)<= DAY_END)TENOR_DESCRIPTION
 FROM FTP_AUDIT_TAB_202005 A  
 WHERE BUSINESS_DATE IN ('29-may-2020','22-may-2020','15-may-2020' )
 AND FTP_GROUP IN ('FD','INTPAY') 
 UNION ALL
SELECT /*+PARALLEL(3)*/ YEAR_MONTH, BUSINESS_DATE, VISION_SBU, CUSTOMER_ID, CONTRACT_ID, CUSTOMER_NAME, CURRENCY, EXCHANGE_RATE, MIS_CURRENCY, FTP_GROUP, 
FTP_REFERENCE, FTP_SOURCE_REFERENCE, FTP_METHOD_REFERENCE, METHOD_TYPE, REPRICING_FLAG, FTP_TENOR_TYPE, LP_TENOR_TYPE, START_DATE, MATURITY_DATE, START_REPRICE_DATE, NEXT_REPRICE_DATE, REPRICING_TERM, REPRICING_TERM_CODE, BALANCE, FTP_TOTAL, FTP_RATE_TOTAL, CUSTOMER_INTEREST, FTP_MARGIN, FTP_CURVE_ID, FTP_RATE_ID, FTP_CURVE, FTP_ADDON, FTP_SUBSIDY, LP_RATE_ID, LP_RATE, FTP_AMOUNT, FTP_ADJUSTMENT, PREMIUM, ADDON_DEPOSIT_RATE, ADDON_DEPOSIT_AMT, SUBSIDY_RATE, SUBSIDY_AMT, ADDON_LENDING_RATE, ADDON_LENDING_AMT, REQUIRED_RESERVE_RATE, REQUIRED_RESERVE_AMT, GL_ALLOCATION_RATE, GL_ALLOCATION_AMT, ADDON_ATT_RATE1, ADDON_ATT_AMT1, OFFICE_ACCOUNT, GL_ENRICH_ID, BS_GL, PL_GL, VISION_OUC, ACCOUNT_OFFICER, COST_CENTER, SOURCE_OF_FUND, SOURCE_ID, RECORD_TYPE, ORIGINAL_OUC, A.DATE_LAST_MODIFIED, A.DATE_CREATION, COUNTRY, LE_BOOK, SEQUENCE_FD, 
SEQUENCE_FD_NEW, VERSION_NO, SBU_AUDIT,
 (SELECT /*+PARALLEL(3)*/ TENOR_DESCRIPTION FROM TENOR_BUCKETS
 WHERE   TENOR_APPLICATION_CODE = 203
    AND NVL(ROUND(TO_DATE(MATURITY_DATE,'DD-MM-RRRR')- TO_DATE(START_DATE,'DD-MM-RRRR') +1),0) 
    > DAY_START  
    AND  NVL(ROUND(TO_DATE(MATURITY_DATE,'DD-MM-RRRR')- TO_DATE(START_DATE,'DD-MM-RRRR') +1),0)<= DAY_END)TENOR_DESCRIPTION
 FROM FTP_AUDIT_TAB_202006 A 
 WHERE BUSINESS_DATE IN ( '05-jun-2020')
 AND FTP_GROUP IN ('FD','INTPAY') 
    
   
 